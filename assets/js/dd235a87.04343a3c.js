"use strict";(self.webpackChunksermas_eu_github_io=self.webpackChunksermas_eu_github_io||[]).push([[539],{6918:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"llm/openai","title":"OpenAI","description":"OpenAI offers chat completions and embeddings suport. Additionaly it covers STT/TTS and real time interaction API.","source":"@site/docs/llm/openai.md","sourceDirName":"llm","slug":"/llm/openai","permalink":"/docs/llm/openai","draft":false,"unlisted":false,"editUrl":"https://github.com/sermas-eu/sermas-eu.github.io/sidebar.ts/docs/llm/openai.md","tags":[],"version":"current","sidebarPosition":0.00022,"frontMatter":{"sidebar_position":0.00022},"sidebar":"tutorialSidebar","previous":{"title":"Ollama","permalink":"/docs/llm/ollama"},"next":{"title":"CLI","permalink":"/docs/category/cli"}}');var i=t(4848),a=t(8453);const s={sidebar_position:22e-5},r="OpenAI",l={},d=[{value:"Configure the Toolkit API",id:"configure-the-toolkit-api",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"openai",children:"OpenAI"})}),"\n",(0,i.jsx)(n.p,{children:"OpenAI offers chat completions and embeddings suport. Additionaly it covers STT/TTS and real time interaction API."}),"\n",(0,i.jsx)(n.p,{children:"OpenAI is configured as default provider. The minimum setup required is an api key."}),"\n",(0,i.jsxs)(n.p,{children:["To obtain an OpenAI apikey see ",(0,i.jsx)(n.a,{href:"https://platform.openai.com/docs/quickstart",children:"the OpenAI docs"})]}),"\n",(0,i.jsx)(n.h2,{id:"configure-the-toolkit-api",children:"Configure the Toolkit API"}),"\n",(0,i.jsxs)(n.p,{children:["Locate the file ",(0,i.jsx)(n.code,{children:"./config/api/.env"})," and add the following configurations"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",children:"LLM_SERVICE=openai\nLLM_EMBEDDINGS_SERVICE=openai\n\nOPENAI_API_KEY='api key'\n\n##\n# The following are already set as defaults, skip if you do not want to change them.\n##\n\n# Used for embeddings extraction \nOPENAI_EMBEDDINGS_MODEL='text-embedding-3-small'\n\n# Supported chat models from OpenAI. Leave empty to allow all available.\nOPENAI_CHAT_MODELS='gpt-4o,gpt-4o-mini,gpt-4,gpt-4-turbo,gpt-3.5-turbo,gpt-3.5-turbo-16k,o1-preview,o1-mini',\n\n# OPENAI_MODEL Default OpenAI model used as fallback if not specified otherwise for a tag (see below)\nOPENAI_MODEL='gpt-4o'\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var o=t(6540);const i={},a=o.createContext(i);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);