"use strict";(self.webpackChunksermas_eu_github_io=self.webpackChunksermas_eu_github_io||[]).push([[2629],{6698:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"agent/tasks/index","title":"Introduction","description":"LLM based tasks allow to create conversational flows to collect information from the user.","source":"@site/docs/agent/tasks/index.md","sourceDirName":"agent/tasks","slug":"/agent/tasks/","permalink":"/docs/agent/tasks/","draft":false,"unlisted":false,"editUrl":"https://github.com/sermas-eu/sermas-eu.github.io/sidebar.ts/docs/agent/tasks/index.md","tags":[],"version":"current","sidebarPosition":0.000022,"frontMatter":{"sidebar_label":"Tasks","sidebar_position":0.000022},"sidebar":"tutorialSidebar","previous":{"title":"Tools","permalink":"/docs/agent/tools/"},"next":{"title":"RAG support","permalink":"/docs/category/rag-support"}}');var a=t(4848),s=t(8453);const o={sidebar_label:"Tasks",sidebar_position:22e-6},l="Introduction",r={},d=[{value:"Intents",id:"intents",level:2},{value:"Events",id:"events",level:2},{value:"Fields",id:"fields",level:2},{value:"Field type",id:"field-type",level:3},{value:"Eval example",id:"eval-example",level:4},{value:"Date example",id:"date-example",level:4},{value:"Select example",id:"select-example",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,a.jsx)(n.p,{children:"LLM based tasks allow to create conversational flows to collect information from the user."}),"\n",(0,a.jsx)(n.p,{children:"A task can be aborted by the user upon explicit request or by providing indication they want to leave the interaction context."}),"\n",(0,a.jsx)(n.h1,{id:"task-definition",children:"Task definition"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"appId: reference app ID\nname: machine name of the task e.g. take-appointment\ndescription: Textual description of the task\nlabel: A label to show when provided as button via UI\nhint: specific description or constraints to drive the proper completion of task eg. \nthe user can take an appoitnment with offices handling finacial or shipping topics. Refuse other appointment. \n\n"})}),"\n",(0,a.jsx)(n.h2,{id:"intents",children:"Intents"}),"\n",(0,a.jsx)(n.p,{children:"Tasks are matched from the dialogue interactions via intent detection wiht LLM."}),"\n",(0,a.jsx)(n.p,{children:"Providing a refined list of intents ensure the task is selected correctly in most cases."}),"\n",(0,a.jsx)(n.p,{children:"The agent will also try to propose a task to the user based on the context and topic of the discussion."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"  intents:\n  - name: financial-office-appointment\n    description: an appointment on financial topics such as bank accounts, credits card\n  - name: shipping-appointment\n    description: appointment to manage shipment issues such as sending, receiving or missing packages\n\n"})}),"\n",(0,a.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,a.jsx)(n.p,{children:"Events are triggered during the task execution and they could be one of the following"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"start"})," task starts"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ongoing"})," task field is completed and the next one is going to be provided, if any"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"aborted"})," task aborted by the user or the system"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"completed"})," task correctly completed (all fields covered)"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"  events:\n    - type: completed\n\n      # message the agent will say on event triggering\n      message: all done!\n\n      # an LLM cohmprensible condition to trigger the execution of the event. Fields values will be available and you can refer to them in the condition matching\n      # example #1\n      condition: if myfield is not empty and birthday is less than 150 years\n      # example #2\n      condition: based on the provided fields, user should be interested in talking with an operator\n\n      # trigger another task or tool based on configuration\n      trigger: \n      # task/ prefix will trigger a new task\n      - name: task/take-appointment-with-john\n      # tool/ prefix will trigger a tool, passing the task field values as tool values\n      - name: tool/send-email\n"})}),"\n",(0,a.jsx)(n.h2,{id:"fields",children:"Fields"}),"\n",(0,a.jsx)(n.p,{children:"Task collect information trough fields. Based on the field configuration the agent will ask for specific information to the user and process it accordingly."}),"\n",(0,a.jsx)(n.p,{children:"Fields can be configured using those properties"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"})," a name for the value e.g. fullname or address\n",(0,a.jsx)(n.code,{children:"condition"})," evaluate a condition in the context of a task, if the condition is not met the field will be skipped. e.g. ",(0,a.jsx)(n.code,{children:"reason is not empty"})]}),"\n",(0,a.jsx)(n.h3,{id:"field-type",children:"Field type"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"type"})," property allow to change the behavours of the agent collecting a value. Supported types are:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"text"})," expect a textual input"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"eval"})," evaluate a condition based on the context"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"date"})," expect an interpretable date input"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"boolean"})," expect an explicit confirmation such as yes or no"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"select"})," expect the user to select one of the available"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"external"})," delegate handling to an exernal integration"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"eval-example",children:"Eval example"}),"\n",(0,a.jsxs)(n.p,{children:["Eval return a boolean value based on ",(0,a.jsx)(n.code,{children:"prompt"}),". Placeholder available are ",(0,a.jsx)(n.code,{children:"{history}"})," for the chat history and any field value in the task e.g. ",(0,a.jsx)(n.code,{children:"{my-task-field}"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'  fields:\n     - name: reason\n      type: eval\n      required: true\n      prompt: |\n        Extract the reason of the appointment for the user, based on the HISTORY messages.\n        HISTORY: \n        {history}\n\n    - name: service-type\n      type: eval\n      required: true\n      prompt: | \n        Return the \'name\' field of one of the following services, matching with the USER request:\n        - { name: "Financial", description: "talk about money" }\n        - { name: "Shipping", description: "about shipping" }\n        - { name: "Support", description: "any other aspect" }\n        - Altro\n        USER: {reason}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"date-example",children:"Date example"}),"\n",(0,a.jsx)(n.p,{children:"The date type accept a date as provided by the user"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"    - name: date\n      condition: \"service-type == 'Financial'\"\n      label: Provide your date of birth\n      type: date\n      required: true\n      hint: |\n        User should provide their date of birth. Ensure it's complete and reasonable (e.g. not earlier than 1940)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"select-example",children:"Select example"}),"\n",(0,a.jsx)(n.p,{children:"Used to ask a direct question to the user, the user must choose one of the options"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"- name: confirm\n  type: select\n  label: Which color\n  required: true\n  options:\n    - label: Red\n      value: dark-red\n    - label: Blue\n      value: light-blue\n    - label: Yellow\n      value: yellow\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(6540);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);